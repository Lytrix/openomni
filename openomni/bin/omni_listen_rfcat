#!/usr/bin/env python2

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import

import time
import argparse
import sys
import getpass
import json
from datetime import datetime

from rflib import RfCat, keystop, ChipconUsbTimeoutException
import openomni.rf
from openomni.packet import Packet


       


def main(options=None):

    parser = argparse.ArgumentParser(description="Capture omnipod packets using rfcat.")
    parser.add_argument("--json", action="store_true",
                        help="print as json (default: text line)")

    parser.add_argument("--raw", action="store_true",
                        help="print raw packet")

    args = parser.parse_args()

    d = RfCat(0, debug=False)
    openomni.rf.configure_rfcat(d)

    # Default variables for filename
    dateRecording = datetime.today().isoformat()
    userName = getpass.getuser()
    fileName = '%s-%s' % (dateRecording, userName)


 
    #actionDescription = raw_input("Write what you are doing: ")
    with open('../../results/' + fileName + '.json', 'a') as outFile:
        """Create 1 dict for each message loop."""
        package ={}
        messages = {"string": [], 
                    "raw": []}
        print ('Start recording:')
        print ('-------------------------')        
        print ('Press \'ctrl+c\' to quit and write the performed action')
        while not keystop():
            try:
                pkt, ts = d.RFrecv(timeout=80000)
                pkt = Packet.flip_bytes(pkt)
                rcv_time = datetime.now()
                x = 0
                while x < len(pkt):
                    data = pkt[:len(pkt) - (x + 1)]
                    packet = Packet(data)
                    packet.received_at = rcv_time
                    if packet.is_valid():
                        # print(data.encode("hex"))
                        if args.raw:
                            print(packet.data.encode("hex"))
                            messages.append(packet.data.encode("hex"))
                        if args.json:
                            print(packet.as_json())
                            messages.append(packet.as_json())
                        else:
                            print(packet)
                            messages["string"].append(str(packet))
                            messages["raw"].append(packet.data.encode("hex"))
                            package["messages"] = messages
                        break
                    x += 1
            except ChipconUsbTimeoutException:
                # time.sleep(0.5)
                action = raw_input('Performed action: ')
                package["Action"] = action
                break
        json.dump(package, outFile, encoding="utf-8", indent=4)
        # sys.stdin.read(1)
        print("Stopped recording")


if __name__ == "__main__":
    main()
