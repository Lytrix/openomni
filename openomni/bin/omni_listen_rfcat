#!/usr/bin/env python2

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import

import argparse
import os
import sys
import getpass
import json
from datetime import datetime

from rflib import RfCat, keystop, ChipconUsbTimeoutException
import openomni.rf
from openomni.packet import Packet


def main(options=None):
    parser = argparse.ArgumentParser(description="Capture Omnipod packets using rfcat. For a quickstart use this command: omni_listen_rfcat --path results/")
    parser.add_argument("--path",
                        type=str,
                        help="""
                                Add the path you want to save the resulting json.
                                --path /Users/MyName/Documents/results/
                                or --path results/ to save in the current folder.
                             """,
                        nargs=1)
    parser.add_argument("--json",
                        action="store_true",
                        help="print as json (default: text line)")
    parser.add_argument("--raw",
                        action="store_true",
                        help="print raw packet")

    args = parser.parse_args()

    # if no argument is used, show help and exit
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    path = args.path[0]

    # Create path if it does not exists
    try:
        os.makedirs(path)
    except OSError:
        if not os.path.isdir(path):
            raise

    # Default variables for filename
    recording_datetime = datetime.today().isoformat()
    username = getpass.getuser()
    filename = "%s-%s" % (recording_datetime, username)

    with open(path + filename + ".json", "a") as out_file:
        # setup the RFcat
        d = RfCat(0, debug=False)
        openomni.rf.configure_rfcat(d)

        package = {}
        messages = {"string": [],
                    "raw": []
                    }

        print("""
    --------------------------------------------------------
    Start recording...
    Press \"ctrl+c\" to quit and write the performed action.
    --------------------------------------------------------
    (listening stops automatically after 10 minutes)
    """)

        while not keystop():
            try:
                pkt, ts = d.RFrecv(timeout=600000)  # 10 minutes timeout
                pkt = Packet.flip_bytes(pkt)
                rcv_time = datetime.now()
                x = 0
                while x < len(pkt):
                    data = pkt[:len(pkt) - (x + 1)]
                    packet = Packet(data)
                    packet.received_at = rcv_time
                    if packet.is_valid():
                        # print(data.encode("hex"))
                        if args.raw:
                            print(packet.data.encode("hex"))
                            messages.append(packet.data.encode("hex"))
                        if args.json:
                            print(packet.as_json())
                            messages.append(packet.as_json())
                        else:
                            print(packet)
                            messages["string"].append(str(packet))
                            print(packet.body)
                            messages["raw"].append(packet.data.encode("hex"))
                            package["messages"] = messages
                        break
                    x += 1
            except ChipconUsbTimeoutException:
                # time.sleep(0.5)
                action = raw_input("Performed action: ")
                package["Action"] = action
                break
        json.dump(package, out_file, encoding="utf-8", indent=4)
        # sys.stdin.read(1)
        print("Stopped recording")


if __name__ == "__main__":
    main()
